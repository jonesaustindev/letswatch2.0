{"version":3,"file":"static/webpack/static\\development\\pages\\movie.js.1b3d9c835fade3f9de3d.hot-update.js","sources":["webpack:///./components/MoviePage.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport styled from 'styled-components';\r\nimport Link from 'next/link';\r\nimport YouTube from 'react-youtube';\r\nimport CreateLike from './CreateLike';\r\nimport User from './User';\r\nimport PleaseSignIn from './PleaseSignin';\r\nimport AddToLikes from './AddToLikes';\r\nimport ActorCard from './ActorCard';\r\nimport MovieImage from './MovieImage';\r\nimport MovieVideos from './MovieVideos';\r\n\r\nconst SINGLE_MOVIE_QUERY = gql`\r\n    query SINGLE_MOVIE_QUERY($id: ID) {\r\n        singleMovie(id: $id) {\r\n            id\r\n            poster_path\r\n            backdrop_path\r\n            overview\r\n            release_date\r\n            runtime\r\n            title\r\n            vote_average\r\n            credits {\r\n                cast {\r\n                    name\r\n                    character\r\n                    profile_path\r\n                }\r\n            }\r\n            videos {\r\n                results {\r\n                    name\r\n                    type\r\n                    key\r\n                }\r\n            }\r\n            images {\r\n                backdrops {\r\n                    file_path\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst MoviePageContainer = styled.div`\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nconst MovieHeader = styled.div`\r\n    position: relative;\r\n    color: white;\r\n    p, h3, h4, h5, h6 {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    h3 {\r\n        font-size: 8vmin;\r\n        line-height: 1.2;\r\n        margin-bottom: 60px;\r\n    }\r\n    h4 {\r\n        font-size: 1.3rem;\r\n    }\r\n    p {\r\n        font-size: 1rem;\r\n        padding-top: 1em;\r\n        color: ${props => props.theme.offWhite};\r\n    }\r\n    .movie-content {\r\n        margin: auto;\r\n        max-width: ${props => props.theme.maxWidth};\r\n        padding: 0.8em;\r\n    }\r\n    .overview-container {\r\n        margin-top: 100px;\r\n    }\r\n    .overview-container p {\r\n        line-height: 1.5rem;\r\n        font-size: 1.3rem;\r\n    }\r\n    .video-player {\r\n        width: 200px;\r\n    }\r\n    .like-button {\r\n        position: absolute;\r\n        bottom: 0;\r\n        right: 0;\r\n        margin-right: 25px;\r\n        margin-bottom: 10px;\r\n        padding: 1.5em;\r\n    }\r\n    .unliked {\r\n        color: white;\r\n        a:hover {\r\n            cursor: pointer;\r\n        }\r\n    }\r\n    #full-overview {\r\n        margin-top: 100px;\r\n    }\r\n    @media(max-width: ${props => props.theme.smallBreak}) {\r\n        #full-overview {\r\n            margin-top: 50px;\r\n            font-size: 0.9rem;\r\n        }\r\n        .like-button {\r\n            left: 0;\r\n        }\r\n    }\r\n    @media(min-width: ${props => props.theme.smallBreak}) {\r\n        .short-overview {\r\n            display: none;\r\n        }\r\n    }\r\n`;\r\n\r\nconst MovieBody = styled.div`\r\n    background: white;\r\n`;\r\n\r\nconst ActorContainer = styled.div`\r\n    max-width: ${props => props.theme.maxWidth};\r\n    margin: auto;\r\n    .actor-grid {\r\n        display: grid;\r\n        grid-gap: 10px;\r\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n        padding: 20px;\r\n    }\r\n    h3 {\r\n        font-size: 6.5vmin;\r\n        text-align: center;\r\n        padding-top: 50px;\r\n        margin: 0;\r\n        color: ${props => props.theme.mainColor};\r\n    }\r\n`;\r\n\r\nconst HR = styled.hr`\r\n    border: 0;\r\n    height: 1px;\r\n    background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.75), rgba(0, 0, 0, 0));\r\n    margin-top: 80px;\r\n    margin-bottom: 80px;\r\n`;\r\n\r\nconst ImagesContainer = styled.div`\r\n    max-width: ${props => props.theme.maxWidth};\r\n    margin: auto;\r\n    .images-grid {\r\n        display: grid;\r\n        grid-gap: 5px;\r\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n        padding: 20px;\r\n    }\r\n    margin-bottom: 50px;\r\n`;\r\n\r\nconst VideosContainer = styled.div`\r\n    max-width: 640px;\r\n    margin: auto;\r\n    .video-grid {\r\n        @media(max-width: ${props => props.theme.smallBreak}) {\r\n            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n        }\r\n        display: grid;\r\n        grid-gap: 10px;\r\n        padding: 10px;\r\n    }\r\n`;\r\n\r\n// const ActorGrid = styled.div`\r\n//     display: grid;\r\n//     grid-gap: 10px;\r\n//     grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n//     padding: 20px;\r\n// `;\r\n\r\nclass MoviePage extends Component {\r\n    render() {\r\n        return (\r\n            <Query query={SINGLE_MOVIE_QUERY} variables={{\r\n                id: this.props.id\r\n            }}>\r\n                {({ error, loading, data }) => {\r\n                    if (error) return <p>Error!</p>;\r\n                    if (loading) return <p>Loading...</p>;\r\n                    const movie = data.singleMovie;\r\n                    const backgroundUrl = `https://image.tmdb.org/t/p/original${movie.backdrop_path}`;\r\n                    const posterUrl = `https://image.tmdb.org/t/p/original${movie.poster_path}`;\r\n\r\n                    const backgroundStyle = {\r\n                        backgroundImage: `linear-gradient(rgba(0,0,0,0.65), rgba(0,0,0,0.65)), url('${backgroundUrl}'`,\r\n                        backgroundRepeat: 'no-repeat',\r\n                        backgroundSize: 'cover',\r\n                        width: '100%',\r\n                        height: '750px'\r\n                    }\r\n\r\n                    const opts = {\r\n                        width: 'auto'\r\n                    };\r\n\r\n                    const [videos] = movie.videos.results;\r\n                    const trailer = videos.type.includes('Trailer');\r\n                    console.log(trailer);\r\n\r\n                    return (\r\n                        <MoviePageContainer>\r\n                            <User>\r\n                                {({ data: { me } }) => (\r\n                                    <div>\r\n                                        <MovieHeader>\r\n                                            <div style={backgroundStyle}>\r\n                                                <div className=\"header-content\">\r\n                                                    <div className=\"movie-content\">\r\n                                                        <h3>{movie.title}</h3>\r\n                                                        <h4>User Rating <span>{movie.vote_average * 10}%</span></h4>\r\n                                                        <p>{movie.runtime} minutes</p>\r\n                                                        <p className=\"release-date\">{movie.release_date.slice(0, 4)}</p>\r\n                                                        <p id=\"full-overview\">{movie.overview}</p>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className=\"video-player\">\r\n                                                    {movie.videos.results.map((video, index) => {\r\n                                                        // if (video.type.includes('Trailer')) {\r\n                                                        //     video.slice(0, 1).map((video, index) => (\r\n                                                        //         <YouTube\r\n                                                        //             videoId={video.key}\r\n                                                        //             opts={opts}\r\n                                                        //             key={index}\r\n                                                        //         />\r\n                                                        //     ))\r\n                                                        // }\r\n                                                    })}\r\n                                                </div>\r\n\r\n                                                <div className=\"like-button\">\r\n                                                    {/* Signed in */}\r\n                                                    {me && (\r\n                                                        <React.Fragment>\r\n                                                            <AddToLikes id={movie.id} />\r\n                                                        </React.Fragment>\r\n                                                    )}\r\n\r\n                                                    {/* Logged out */}\r\n                                                    {!me && (\r\n                                                        <React.Fragment>\r\n                                                            <Link href=\"signin\">\r\n                                                                <a className=\"unliked\"><i class=\"far fa-heart\"></i></a>\r\n                                                            </Link>\r\n                                                        </React.Fragment>\r\n                                                    )}\r\n                                                </div>\r\n                                            </div>\r\n                                        </MovieHeader>\r\n                                        <MovieBody>\r\n                                            <ActorContainer>\r\n                                                <h3>Top Billed Cast</h3>\r\n                                                <div className=\"actor-grid\">\r\n                                                    {movie.credits.cast.slice(0, 4).map((actor, index) => (\r\n                                                        <ActorCard key={index} actor={actor} />\r\n                                                    ))}\r\n                                                </div>\r\n                                            </ActorContainer>\r\n\r\n                                            <HR />\r\n\r\n                                            <ImagesContainer>\r\n                                                <div className=\"images-grid\">\r\n                                                    {movie.images.backdrops.slice(0, 10).map((image, index) => (\r\n                                                        <MovieImage key={index} image={image} />\r\n                                                    ))}\r\n                                                </div>\r\n                                            </ImagesContainer>\r\n\r\n                                            <VideosContainer>\r\n                                                <div className=\"video-grid\">\r\n                                                    {movie.videos.results.slice(0, 1).map((video, index) => (\r\n                                                        <MovieVideos key={index} video={video} />\r\n                                                    ))}\r\n                                                </div>\r\n                                            </VideosContainer>\r\n                                        </MovieBody>\r\n                                    </div>\r\n                                )}\r\n                            </User>\r\n                        </MoviePageContainer>\r\n                    );\r\n                }}\r\n            </Query>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MoviePage;\r\nexport { SINGLE_MOVIE_QUERY };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAkCA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAIA;AAAA;AA8BA;AAAA;AASA;AAAA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAaA;AAAA;AAIA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAWA;AAAA;AAAA;AAAA;AAIA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AADA;AACA;AAhBA;AAAA;AACA;AAmrEA;AAgFA;AAGA;;;;AAnHA;AACA;AAqHA;;;;;A","sourceRoot":""}