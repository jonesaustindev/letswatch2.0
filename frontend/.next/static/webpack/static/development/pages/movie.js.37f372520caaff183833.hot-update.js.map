{"version":3,"file":"static/webpack/static\\development\\pages\\movie.js.37f372520caaff183833.hot-update.js","sources":["webpack:///./components/AddToLikes.js","webpack:///./components/MoviePage.js","webpack:///./components/RemoveLike.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Mutation, Query } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport styled from 'styled-components';\r\nimport { USER_LIKES_QUERY } from './Likes';\r\nimport RemoveLike from './RemoveLike';\r\n\r\nconst LikedBtn = styled.button`\r\n    color: red;\r\n`;\r\n\r\nconst NotLikedBtn = styled.button`\r\n    color: blue;\r\n`;\r\n\r\nconst ADD_TO_LIKES_MUTATION = gql`\r\n    mutation addToLikes($like: String!) {\r\n        addToLikes(like: $like) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nclass AddToLikes extends Component {\r\n    render() {\r\n        const { id } = this.props;\r\n        return (\r\n            <Mutation\r\n                mutation={ADD_TO_LIKES_MUTATION}\r\n                variables={{ like: id }}\r\n                refetchQueries={[{ query: USER_LIKES_QUERY }]}\r\n            >\r\n                {addToLikes => (\r\n                    <Query\r\n                        query={USER_LIKES_QUERY}\r\n                    >\r\n                        {({ data }) => {\r\n                            const movieId = id.toString();\r\n                            const currentUserLikes = data.likeListItems.map((movie) => {\r\n                                return movie.like\r\n                            });\r\n                            const checkedLikes = currentUserLikes.includes(movieId);\r\n                            \r\n                            if(checkedLikes == false) {\r\n                                return <NotLikedBtn onClick={addToLikes}>Like</NotLikedBtn>\r\n                            }\r\n                            \r\n                            if(checkedLikes == true) {\r\n                                return <RemoveLike id={id} />\r\n                            }\r\n                        }}\r\n                    </Query>\r\n                )}\r\n            </Mutation>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddToLikes;","import React, { Component } from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport styled from 'styled-components';\r\nimport CreateLike from './CreateLike';\r\nimport User from './User';\r\nimport PleaseSignIn from './PleaseSignin';\r\nimport AddToLikes from './AddToLikes';\r\n\r\nconst SINGLE_MOVIE_QUERY = gql`\r\n    query SINGLE_MOVIE_QUERY($id: ID) {\r\n        singleMovie(id: $id) {\r\n            id\r\n            poster_path\r\n            backdrop_path\r\n            overview\r\n            release_date\r\n            runtime\r\n            title\r\n            vote_average\r\n            credits {\r\n                cast {\r\n                    name\r\n                }\r\n            }\r\n            videos {\r\n                results {\r\n                    name\r\n                    type\r\n                }\r\n            }\r\n            images {\r\n                backdrops {\r\n                    file_path\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst MoviePageContainer = styled.div`\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nconst MovieHeader = styled.div`\r\n    color: white;\r\n    p, h3, h4, h5, h6 {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    h3 {\r\n        font-size: 8vmin;\r\n        line-height: 1.2;\r\n    }\r\n    h4 {\r\n        font-size: 1.3rem;\r\n    }\r\n    p {\r\n        font-size: 1rem;\r\n        color: ${props => props.theme.offWhite};\r\n    }\r\n    .movie-content {\r\n        margin: auto;\r\n        max-width: ${props => props.theme.maxWidth};\r\n        padding: 0.8em;\r\n    }\r\n`;\r\n\r\nclass MoviePage extends Component {\r\n    render() {\r\n        return (\r\n            <Query query={SINGLE_MOVIE_QUERY} variables={{\r\n                id: this.props.id\r\n            }}>\r\n                {({ error, loading, data }) => {\r\n                    if (error) return <p>Error!</p>;\r\n                    if (loading) return <p>Loading...</p>;\r\n                    const movie = data.singleMovie;\r\n                    const backgroundUrl = `https://image.tmdb.org/t/p/original${movie.backdrop_path}`;\r\n\r\n                    const backgroundStyle = {\r\n                        backgroundImage: `linear-gradient(rgba(0,0,0,0.65), rgba(0,0,0,0.65)), url('${backgroundUrl}'`,\r\n                        backgroundRepeat: 'no-repeat',\r\n                        backgroundSize: 'cover',\r\n                        width: '100%',\r\n                        height: '750px'\r\n                    }\r\n                    return (\r\n                        <MoviePageContainer>\r\n                            <User>\r\n                                {({ data: { me } }) => (\r\n                                    <div>\r\n                                        <MovieHeader>\r\n                                            <div style={backgroundStyle}>\r\n                                                <div className=\"header-content\">\r\n                                                    <div className=\"movie-content\">\r\n                                                        <h3>{movie.title}</h3>\r\n                                                        <h4>User Rating <span>{movie.vote_average * 10}%</span></h4>\r\n                                                        <p>{movie.runtime} minutes</p>\r\n                                                        <p>{movie.release_date.slice(0, 4)}</p>\r\n                                                        <div>\r\n                                                            {/* Signed in */}\r\n                                                            {me && (\r\n                                                                <React.Fragment>\r\n                                                                    <AddToLikes id={movie.id} />\r\n                                                                </React.Fragment>\r\n                                                            )}\r\n\r\n                                                            {/* Logged out */}\r\n                                                            {!me && (\r\n                                                                <React.Fragment>\r\n                                                                    <button>Like</button>\r\n                                                                </React.Fragment>\r\n                                                            )}\r\n                                                        </div>\r\n                                                        <p>{movie.overview}</p>\r\n                                                        <li>{movie.poster_path} poster path</li>\r\n                                                        <li>{movie.backdrop_path} backdrop path</li>\r\n                                                    </div>\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </MovieHeader>\r\n                                        <div>\r\n                                            {movie.credits.cast.slice(0, 6).map((actor, index) => (\r\n                                                <li key={index}>{actor.name}</li>\r\n                                            ))}\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            {movie.videos.results.map((video, index) => (\r\n                                                <li key={index}>{video.name}</li>\r\n                                            ))}\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            {movie.images.backdrops.map((image, index) => (\r\n                                                <li key={index}>{image.file_path}</li>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </User>\r\n                        </MoviePageContainer>\r\n                    );\r\n                }}\r\n            </Query>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MoviePage;\r\nexport { SINGLE_MOVIE_QUERY };","import React, { Component } from 'react';\r\nimport { Mutation } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport { USER_LIKES_QUERY } from './Likes';\r\n\r\nconst DELETE_LIKE_MUTATION = gql`\r\n    mutation DELETE_LIKE_MUTATION($id: ID!) {\r\n        deleteAddToLikes(id: $id) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nclass RemoveLike extends Component {\r\n    update = (cache, payload) => {\r\n        const data = cache.readQuery({ query: USER_LIKES_QUERY });\r\n        data.likes = data.likes.filter(like => like.id !== payload.data.deleteAddToLikes.id);\r\n        cache.writeQuery({ query: USER_LIKES_QUERY, data });\r\n    }\r\n    render() {\r\n        return (\r\n            <Mutation\r\n                mutation={DELETE_LIKE_MUTATION}\r\n                variables={{ id: this.props.id }}\r\n                update={this.update}\r\n            >\r\n                {(deleteAddToLikes, { error }) => (\r\n                    <button onClick={() => {\r\n                        deleteAddToLikes().catch(err => {\r\n                            alert(err.message);\r\n                        });\r\n                    }}>\r\n                        Like\r\n                    </button>\r\n                )}\r\n            </Mutation>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RemoveLike;"],"mappings":"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","sourceRoot":""}